<?php

require_once __DIR__ . "/../inc/zan.inc";

//$simple_tcp_server = __DIR__ . "/../../apitest/swoole_server/opcode_server.php";
//$port = get_one_free_port();

//start_server($simple_tcp_server, TCP_SERVER_HOST, $port);

//suicide(2000);
//usleep(500 * 1000);

/*
makeTcpClient(TCP_SERVER_HOST, TCP_SERVER_PORT, function(\swoole_client $cli) {
    $r = $cli->send(opcode_encode("stop", [2]));
    assert($r !== false);
}, function(\swoole_client $cli, $recv) {
    list($op, $data) = opcode_decode($recv);
    assert($data === true);
    swoole_event_exit();
    echo "SUCCESS";
});
*/

$host = TCP_SERVER_HOST;
$port = TCP_SERVER_PORT;


$pid = pcntl_fork();
if ($pid < 0) {
    exit;
}

if ($pid === 0) {
    usleep(1000);

    $client = new swoole_client(SWOOLE_SOCK_TCP, SWOOLE_SOCK_ASYNC);
    
    //设置事件回调函数
    $client->on("connect", function($cli) {
        $cli->send("Hello Server!\n");
        $cli->close();
    });
    $client->on("receive", function($cli, $data){
        //echo "Client Received: ".$data."\n";
    });
    $client->on("error", function($cli){
        echo "Clinet Error.\n";
    });
    $client->on("close", function($cli){
        //echo "Client Close.\n";
    });
    //发起网络连接
    $client->connect($host, $port, 0.5);

} else {

    $serv = new swoole_server($host, $port);
    $serv->set([
        'worker_num' => 1,
        'net_worker_num' => 1,
        'log_file' => '/dev/null',
    ]);

    $serv->on('Connect', function ($serv, $fd){
        echo "Server: onConnected, client_fd=$fd\n";
    });

    $serv->on('Receive', function ($serv, $fd, $from_id, $data) use($pid) {
        echo "Server: Receive data: $data\n";
        //pcntl_waitpid($pid, $status);
        $serv->shutdown();
    });
    $serv->start();
}
